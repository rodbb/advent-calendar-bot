name: Build Application

on:
  push:
    tags: ['v*.*.*']

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest]

    defaults:
      run:
        shell: ${{ (matrix.os == 'windows-latest' && 'bash') || 'sh' }}

    steps:
    - uses: actions/checkout@v2

    - name: Setup Haskell
      id: setup-haskell
      uses: haskell/actions/setup@main
      with:
        ghc-version: '9.0.2'
        enable-stack: true
        stack-version: 'latest'

    - name: Cache .stack
      id: cache-stack
      uses: actions/cache@v2
      with:
        path: ${{ steps.setup-haskell.outputs.stack-root }}
        key: ${{ runner.os }}-stack-${{ hashFiles('**/stack.yaml.lock') }}-${{ hashFiles('**/package.yaml') }}
        restore-keys: |
          ${{ runner.os }}-stack-${{ hashFiles('**/stack.yaml.lock') }}-
          ${{ runner.os }}-stack-

    - name: Install dependencies
      run: stack --system-ghc build --only-dependencies

    - name: Build Application
      run: stack --system-ghc install --local-bin-path=./${{ github.event.repository.name }}

    - name: Copy sample template
      run: cp -r ./templates ./${{ github.event.repository.name }}/

    - uses: jonabc/setup-licensed@v1
      with:
        version: '3.x'

    - name: Collect dependencies License file
      run: stack --system-ghc exec -- licensed cache

    - name: Copy own license file and READEME
      run: |
        cp ./LICENSE ./${{ github.event.repository.name }}/
        cp ./README.md ./${{ github.event.repository.name }}/

    - name: Artifact basename
      id: artifact
      run: |
        echo ::set-output name=basename::${{ github.event.repository.name }}-${{ runner.OS }}
        echo ::set-output name=extension::${{ (matrix.os == 'windows-latest' && 'zip') || 'tar.gz' }}

    - name: Compress on Linux
      if: matrix.os == 'ubuntu-latest'
      run: tar zcvf ${{ steps.artifact.outputs.basename }}.${{ steps.artifact.outputs.extension }} ${{ github.event.repository.name }}

    - name: Compress on Windows
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive `
        -Path ${{ github.event.repository.name }} `
        -DestinationPath ${{ steps.artifact.outputs.basename }}.${{ steps.artifact.outputs.extension }}
      shell: powershell

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        generate_release_notes: true
        files: ${{ steps.artifact.outputs.basename }}.${{ steps.artifact.outputs.extension }}
